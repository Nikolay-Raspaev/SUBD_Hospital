// <auto-generated />
using System;
using MedicalFacilityPortalDatabaseImplement;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedicalFacilityPortalDatabaseImplement.Migrations
{
    [DbContext(typeof(MedicalFacilityPortalDatabase))]
    partial class MedicalFacilityPortalDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.AcademicRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicRankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AcademicRanks");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorServiceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ExecutionStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("ExecutoinStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("DoctorServiceId");

                    b.HasIndex("ExecutionStatusId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicRankId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Birttday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("integer");

                    b.Property<int>("PassportSeries")
                        .HasColumnType("integer");

                    b.Property<string>("Pathronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AcademicRankId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.DoctorService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorsServices");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.ExecutionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ExecutionStatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExecutionStatuses");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birttday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("integer");

                    b.Property<int>("PassportSeries")
                        .HasColumnType("integer");

                    b.Property<string>("Pathronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ServicePrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.ServiceJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesJobs");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.Contract", b =>
                {
                    b.HasOne("MedicalFacilityPortalDatabaseImplement.Models.Patient", null)
                        .WithMany("Contracts")
                        .HasForeignKey("ContractId");

                    b.HasOne("MedicalFacilityPortalDatabaseImplement.Models.DoctorService", null)
                        .WithMany("Contracts")
                        .HasForeignKey("DoctorServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalFacilityPortalDatabaseImplement.Models.ExecutionStatus", null)
                        .WithMany("Contracts")
                        .HasForeignKey("ExecutionStatusId");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.Doctor", b =>
                {
                    b.HasOne("MedicalFacilityPortalDatabaseImplement.Models.AcademicRank", null)
                        .WithMany("Doctors")
                        .HasForeignKey("AcademicRankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.DoctorService", b =>
                {
                    b.HasOne("MedicalFacilityPortalDatabaseImplement.Models.Doctor", null)
                        .WithMany("Services")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.ServiceJob", b =>
                {
                    b.HasOne("MedicalFacilityPortalDatabaseImplement.Models.Job", null)
                        .WithMany("Services")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalFacilityPortalDatabaseImplement.Models.Service", null)
                        .WithMany("Jobs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.AcademicRank", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.Doctor", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.DoctorService", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.ExecutionStatus", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.Job", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.Patient", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("MedicalFacilityPortalDatabaseImplement.Models.Service", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
