// <auto-generated />
using System;
using MedicalFacilityPortalDataBaseImplement2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedicalFacilityPortalDataBaseImplement2.Migrations
{
    [DbContext(typeof(MedDB))]
    [Migration("20230329071921_a")]
    partial class a
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.Contract", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DoctorsServicesId")
                        .HasColumnType("integer")
                        .HasColumnName("doctorsservicesid");

                    b.Property<int>("ExecutionStatus")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("executionstatus");

                    b.Property<DateTime?>("ExerciseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exercisedate");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patientid");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("contracts_pkey");

                    b.HasIndex("DoctorsServicesId");

                    b.HasIndex("PatientId");

                    b.ToTable("contracts", (string)null);
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("AcademicDegree")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("academicdegree");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthdate");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("education");

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("jobid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("integer")
                        .HasColumnName("passportnumber");

                    b.Property<int>("PassportSeries")
                        .HasColumnType("integer")
                        .HasColumnName("passportseries");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("surname");

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("telephonenumber");

                    b.HasKey("Id")
                        .HasName("doctors_pkey");

                    b.HasIndex("JobId");

                    b.ToTable("doctors", (string)null);
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.DoctorsServices", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("DoctorsId")
                        .HasColumnType("integer")
                        .HasColumnName("doctorsid");

                    b.Property<int>("ServicesId")
                        .HasColumnType("integer")
                        .HasColumnName("servicesid");

                    b.HasKey("Id")
                        .HasName("doctorsservices_pkey");

                    b.HasIndex("ServicesId");

                    b.HasIndex(new[] { "DoctorsId", "ServicesId" }, "doctorsservices_doctorsid_servicesid_key")
                        .IsUnique();

                    b.ToTable("doctorsservices", (string)null);
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.Job", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("jobtitle");

                    b.HasKey("Id")
                        .HasName("jobs_pkey");

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthdate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.Property<int>("PassportNumber")
                        .HasColumnType("integer")
                        .HasColumnName("passportnumber");

                    b.Property<int>("PassportSeries")
                        .HasColumnType("integer")
                        .HasColumnName("passportseries");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("surname");

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("telephonenumber");

                    b.HasKey("Id")
                        .HasName("patients_pkey");

                    b.ToTable("patients", (string)null);
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.Service", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("services_pkey");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.Servicesjob", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("jobid");

                    b.Property<int>("ServicesId")
                        .HasColumnType("integer")
                        .HasColumnName("servicesid");

                    b.HasKey("Id")
                        .HasName("servicesjobs_pkey");

                    b.HasIndex("JobId");

                    b.HasIndex("ServicesId");

                    b.ToTable("servicesjobs", (string)null);
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.Contract", b =>
                {
                    b.HasOne("MedicalFacilityPortalDataBaseImplement2.DoctorsServices", "DoctorsServices")
                        .WithMany("Contracts")
                        .HasForeignKey("DoctorsServicesId")
                        .IsRequired()
                        .HasConstraintName("fkcontractdoctorsservices");

                    b.HasOne("MedicalFacilityPortalDataBaseImplement2.Patient", "Patient")
                        .WithMany("Contracts")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("fkcontractpatient");

                    b.Navigation("DoctorsServices");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.Doctor", b =>
                {
                    b.HasOne("MedicalFacilityPortalDataBaseImplement2.Job", "Job")
                        .WithMany("Doctors")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("fkdoctorsjob");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.DoctorsServices", b =>
                {
                    b.HasOne("MedicalFacilityPortalDataBaseImplement2.Doctor", "Doctors")
                        .WithMany("DoctorsServices")
                        .HasForeignKey("DoctorsId")
                        .IsRequired()
                        .HasConstraintName("fkdoctorsservicesservices");

                    b.HasOne("MedicalFacilityPortalDataBaseImplement2.Service", "Services")
                        .WithMany("DoctorsServices")
                        .HasForeignKey("ServicesId")
                        .IsRequired()
                        .HasConstraintName("fkdoctorsservicesdoctors");

                    b.Navigation("Doctors");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.Servicesjob", b =>
                {
                    b.HasOne("MedicalFacilityPortalDataBaseImplement2.Job", "Job")
                        .WithMany("ServicesJobs")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("fkservicesjobjob");

                    b.HasOne("MedicalFacilityPortalDataBaseImplement2.Service", "Services")
                        .WithMany("Servicesjobs")
                        .HasForeignKey("ServicesId")
                        .IsRequired()
                        .HasConstraintName("fkservicesjobservices");

                    b.Navigation("Job");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.Doctor", b =>
                {
                    b.Navigation("DoctorsServices");
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.DoctorsServices", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.Job", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("ServicesJobs");
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.Patient", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("MedicalFacilityPortalDataBaseImplement2.Service", b =>
                {
                    b.Navigation("DoctorsServices");

                    b.Navigation("Servicesjobs");
                });
#pragma warning restore 612, 618
        }
    }
}
